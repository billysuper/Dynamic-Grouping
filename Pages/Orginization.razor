@page "/getconfig"

<PageTitle>Get Configuration</PageTitle>

@using Newtonsoft.Json;
@using Dynamic_Grouping.Data
@using Dynamic_Grouping.Data.Service
@inject SharedDataService shareData
<h1>Combat Unit</h1>

<div class="form-group row">
    <label class="col-sm-2 col-form-label">Add Vlan</label>
    <div class="col-sm-10">
        <input type="text" @bind="newVlan.name" />
        <button class="btn btn-primary" @onclick="Ad">Add</button>
    </div>
</div>
<b></b>
<div class="form-group row">
    <label class="col-sm-2 col-form-label">Remove Vlan</label>
    <div class="col-sm-10">
        <input type="text" @bind="removeVlan.name" />
        <button class="btn btn-primary" @onclick="Rm">Remove</button>
    </div>
</div>
@if (shareData.getCfgService.JsonData==null)
{
    <p><em>Loading...</em></p>
}
else
{
//interfaces
@foreach (var vlan in shareData.vlanList)
{
    <h2>@vlan.Key</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Port</th>
                    <th>Military Power</th>
                    <th>Move</th>
                </tr>
            </thead>
                <tbody>
                    @foreach(var host in shareData.getCfgService.hostsData.Hosts)
                    {
                        if (vlan.Value.Contains(host.devicePort))
                        {
                            <tr>
                                <td>@host.devicePort</td>
                                <td>@host.militaryPower</td>
                                <td>
                                    <select id="role-select" @bind="host.vpls">
                                        @foreach (var option in shareData.vlanList)
                                        {
                                            <option value="@option.Key" selected="@(option.Key==host.vpls)">@option.Key</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        }
                    }    
            </tbody>
        </table>
    }
}
<p>@shareData.postCfgService.serializedJson</p><b></b>
<p>Success:@count</p><b></b>
<p>time:@shareData.Data</p>
@code {
    private Dictionary<string, string> ifaceVpls = new Dictionary<string, string>();
    private VplsInfo newVlan = new VplsInfo();
    private VplsInfo removeVlan = new VplsInfo();
    private int count = 0;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        shareData.OnDataUpdated += UpdateUI;
        /*GetCfg.GetJson(shareData.ip,shareData.porT);
        Host.getHosts(shareData.ip,shareData.porT);
        shareData.hostIface = Host.MatchHostIface( shareData.hostIface, Host.hostsData, GetCfg.JsonData);
        foreach (var host in Host.hostsData.Hosts)
        {
            shareData.hostPower[host.devicePort] = host.militaryPower  ;
        }
        foreach (var host in Host.hostsData.Hosts)
        {
            host.militaryPower= shareData.hostPower[host.devicePort] ;
        }
        shareData.vlanIfaces = VO.getVlanCfg(Host.hostsData,GetCfg.JsonData, shareData.vlanIfaces,shareData.hostIface);
        foreach (var iface in shareData.hostIface)
        {
            ifaceVpls[iface.Value] = "";
        }
        //get host.vpls
        foreach (var  host in Host.hostsData.Hosts)
        {
            foreach (var iface in shareData.hostIface)
            {
                //match interface with port
                if (host.devicePort == iface.Key)
                {
                    foreach (var vlan in shareData.vlanIfaces)
                    {
                        foreach (var Iface in vlan.Value)
                        {
                            if (Iface==iface.Value)
                            {
                                host.vpls = vlan.Key;
                            }
                        }
                    }
                }
            }
        }*/
    }
    private async Task UpdateUI()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        shareData.OnDataUpdated -= UpdateUI;
    }
    private void Ad()
    {
        if (shareData.vlanList.ContainsKey(newVlan.name))
        {
            newVlan.name += " exist.";
        }
        else
        {
            shareData.vlanList.Add(newVlan.name,newVlan.interfaces);
            newVlan.name = "";
        }
    }
    private void Rm()
    {
        if (!shareData.vlanList.ContainsKey(removeVlan.name))
        {
            removeVlan.name += " doesn't exist.";
        }
        else
        {
            //move to Available
            foreach (var iface in shareData.vlanList[removeVlan.name])
            {
                shareData.vlanList["Available"].Add(iface);
            }
            shareData.vlanList.Remove(removeVlan.name);
            removeVlan.name = "";
        }
    }
    private void HandleValidSubmit()
    {
        /*foreach (var  host in shareData.getCfgService.hostsData.Hosts)
        {
            foreach (var iface in shareData.hostIface)
            {
                if (host.devicePort==iface.Key)
                {
                    ifaceVpls[iface.Value] = host.vpls;
                }
            }
        }*/
        /*foreach (var iface in ifaceVpls)
        {
            foreach (var vlan in shareData.vlanIfaces)
            {
                if (iface.Value==vlan.Key)
                {
                    foreach (var ifaces in shareData.vlanIfaces)
                    {
                        if (ifaces.Value.Contains(iface.Key))
                        {
                            ifaces.Value.Remove(iface.Key);
                        }
                    }
                    vlan.Value.Add(iface.Key);

                }

            }
        }

        //modify vlan configuration
        GetCfg.JsonData = VO.setVlanCfg(GetCfg.JsonData, shareData.vlanIfaces);
        var data = GetCfg.JsonData.apps.orgonosprojectvpls.vpls.vplsList;
        ExecuteMethodsInOrderAsync();*/
        count++;
    }
    

}