@page "/getconfig"

<PageTitle>Get Configuration</PageTitle>

@using Newtonsoft.Json;
@using Dynamic_Grouping.Data
@using Dynamic_Grouping.Data.Service
@inject SharedDataService shareData
<h1>作戰編組</h1>

<div class="form-group row">
    <label class="col-sm-2 col-form-label">新增作戰編組</label>
    <div class="col-sm-10">
        <input type="text" @bind="newVlan.name" />
        <button class="btn btn-primary" @onclick="Ad">新增</button>
    </div>
</div>
<p></p>
<div class="form-group row">
    <label class="col-sm-2 col-form-label">移除作戰編組</label>
    <div class="col-sm-10">
        <input type="text" @bind="removeVlan.name" />
        <button class="btn btn-primary" @onclick="Rm">移除</button>
    </div>
</div>
<p></p>
<div class="row align-items-center">
    <label class="col-sm-2 col-form-label">Status:</label>
    <div class="col-sm-10">
        <div>@shareData.Data</div>
    </div>
</div>
<p></p>
@if (shareData.getCfgService.JsonData==null)
{
    <p><em>Loading...</em></p>
}
else
{
//interfaces
@foreach (var vlan in shareData.vlanList)
{
    <h2>@vlan.Key</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>裝置名稱</th>
                    <th>類別</th>
                    <th>所屬編組</th>
                </tr>
            </thead>
                <tbody>
                    @foreach(var host in shareData.getCfgService.hostsData.Hosts)
                    {
                        if (vlan.Value.Contains(host.devicePort))
                        {
                            <tr>
                                <td>@host.iface</td>
                                <td>@host.militaryPower</td>
                                @foreach (var temphost in shareData.getCfgService.hostVlan.Hosts)
                                {
                                    if (temphost.Mac == host.Mac)
                                    {
                                        <td>
                                                <select id="role-select" @bind="temphost.vpls">
                                                    @foreach (var option in shareData.vlanList)
                                                    {
                                                        <option value="@option.Key" selected="@(option.Key==temphost.vpls)">@option.Key</option>
                                                    }
                                                </select>
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    }    
            </tbody>
        </table>
    }
}
<button class="btn btn-primary" @onclick="Update">移動</button>
@*<p>@shareData.postCfgService.serializedJson</p><b></b>*@
@code {
    private Dictionary<string, string> ifaceVpls = new Dictionary<string, string>();
    private VplsInfo newVlan = new VplsInfo();
    private VplsInfo removeVlan = new VplsInfo();
    private int count = 0;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        shareData.OnDataUpdated += UpdateUI;
        shareData.getCfgService.hostVlan = shareData.getCfgService.hostsData;
    }
    private async Task UpdateUI()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        shareData.OnDataUpdated -= UpdateUI;
    }
    private void Ad()
    {
        if (shareData.vlanList.ContainsKey(newVlan.name))
        {
            newVlan.name += " exist.";
        }
        else
        {
            shareData.vlanList.Add(newVlan.name,newVlan.interfaces);
            newVlan.name = "";
        }
    }
    private void Rm()
    {
        if (!shareData.vlanList.ContainsKey(removeVlan.name))
        {
            removeVlan.name += " doesn't exist.";
        }
        else
        {
            //move to Available
            /*foreach (var iface in shareData.vlanList[removeVlan.name])
                {
                shareData.vlanList["Available"].Add(iface);
            }*/
            shareData.vlanList.Remove(removeVlan.name);
            foreach (var host in shareData.getCfgService.hostsData.Hosts)
            {
                if (host.vpls == removeVlan.name)
                {
                    host.vpls = "Available";
                }
            }
            removeVlan.name = "";
        }
    }
    private void Update()
    {
        while (!shareData.isfinish) ;
        foreach (var host in shareData.getCfgService.hostsData.Hosts)
        {
            foreach (var newhost in shareData.getCfgService.hostVlan.Hosts)
            {
                if (host.devicePort == newhost.devicePort)
                {
                    host.vpls = newhost.vpls;
                }
            }
        }
    }
}