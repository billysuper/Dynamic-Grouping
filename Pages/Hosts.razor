@page "/hosts"

<PageTitle>Hosts</PageTitle>

@using Dynamic_Grouping.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject SharedDataService shareData

<h1>Hosts</h1>

<p>time:@shareData.Data</p>a
@if ( shareData.getCfgService.hostsData.Hosts == null)
{
    <p><em>Loading...</em></p>
}
else
{
//interfaces
<table class="table">
    <thead>
        <tr>
            <th>Mac</th>
            <th>Device Port</th>
            <th>Interface</th>
            <th>Military Power</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var host in shareData.getCfgService.hostsData.Hosts)
        {
            <tr>
                <td>@host.Mac</td>
                <td>@host.devicePort</td>
                <td>
                    <input type="text" @bind="@host.iface"/>
                </td>
                <td>
                      <select @bind="host.militaryPower">
                           @foreach (var power in shareData.militaryPowers)
                           {
                                <option value="@power" selected="@(power == host.militaryPower)">@power</option>
                           }
                      </select>
                </td
            </tr>
        }
    </tbody>
</table>
}
@code {

    protected override async Task OnInitializedAsync()
    {
        //background
        await base.OnInitializedAsync();
        shareData.OnDataUpdated += UpdateUI;
        //shareData.hostIface = getHost.MatchHostIface(shareData.hostIface,getHost.hostsData,getCfg.JsonData);
        /*if (shareData.hostIface.Count == 0)
        {
            foreach (var host in getHost.hostsData.Hosts)
            {
                shareData.hostPower[host.devicePort] = host.militaryPower;
            }
        }
        else
        {
            foreach (var host in getHost.hostsData.Hosts)
            {
                host.militaryPower= shareData.hostPower[host.devicePort] ;
            }
        }*/
    }
    //background
    private async Task UpdateUI()
    {
        await InvokeAsync(StateHasChanged);
    }
    //background
    public void Dispose()
    {
        shareData.OnDataUpdated -= UpdateUI;
    }
    private void HandleValidSubmit(EditContext context)
    {
        /*foreach (var host in getCfg.hostsData.Hosts)
        {
            shareData.hostPower[host.devicePort] = host.militaryPower;
        }
        deletePort.DeletePort(shareData.ip,shareData.porT);
        postHost.PostPorts(shareData.hostIface,shareData.ip,shareData.porT);
        getHost.getHosts(shareData.ip,shareData.porT);
        foreach (var host in getHost.hostsData.Hosts)
        {
             host.militaryPower =shareData.hostPower[host.devicePort];
        }*/
    }

}